package com.hourglassapplications;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.DialogInterface;
import android.content.DialogInterface.OnCancelListener;
import android.os.Bundle;
import android.view.KeyEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.webkit.CookieSyncManager;
import android.webkit.WebChromeClient;
import android.webkit.WebView;
import android.webkit.WebViewClient;
import android.widget.Button;

public class BrowserActivity extends ActivityWithMenu {
	private static final String TAG = "BrowserActivity";
	final Activity activity = this;
	private static ProgressDialog progressBar;
	private ViewGroup viewGroupRootWebView;
	private View viewToRemove;
	private WebView webview;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		this.getWindow().requestFeature(Window.FEATURE_PROGRESS); // Must be called before setContentView
		setContentView(R.layout.browser);
		setUpWebView();
		loadUrl(getIntent().getData().toString());
	}	

	private void setUpWebView(){
				// Identify the webview provided by the resources and replace it with a webview generated by code
		viewGroupRootWebView = (ViewGroup) this.findViewById(R.id.linearLayoutRootWebView);
		viewToRemove = viewGroupRootWebView.findViewById(R.id.webview);
		int indexView = viewGroupRootWebView.indexOfChild(viewToRemove);

		webview = new WebView(this);
		setUpWebViewSettings();

		viewGroupRootWebView.removeView(viewToRemove);
		viewGroupRootWebView.addView(webview, indexView);
	}

	private void setUpWebViewSettings(){
		webview.getSettings().setJavaScriptEnabled(true);
		webview.getSettings().setBuiltInZoomControls(true);
		webview.setScrollBarStyle(WebView.SCROLLBARS_INSIDE_OVERLAY);
		webview.setWebViewClient(newWebViewClient());
		webview.setWebChromeClient(newWebChromeClient());
	}

	private WebChromeClient newWebChromeClient(){
		return new WebChromeClient() {
			public void onProgressChanged(WebView view, int progress){
				activity.setTitle("Loading...");
				activity.setProgress(progress * 100);
				if(progress == 100){
					activity.setTitle(R.string.app_name);
				}
			}
		};
	}

	private WebViewClient newWebViewClient() {
		return new WebViewClient(){
			@Override
			public void onReceivedError(WebView view, int errorCode, String description, String failingUrl){
				Log.e(TAG, "onReceivedError(..., " + errorCode + ", " + description + ", "+ failingUrl + ")");
			}

			@Override
			public boolean shouldOverrideUrlLoading(WebView view, String url) {
				view.loadUrl(url);
				return true;
			}

			@Override
			public void onPageFinished(WebView view, String url) {
				if (progressBar != null && progressBar.isShowing()) {
					progressBar.dismiss();
				}
			}

		};
	}

		private void loadUrl(String strUrl){
			setUpProgressBar();
			webview.loadUrl(strUrl);
	   }
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
				// If there is a web page history, go to the previous page, else follow up the system behavior
		if ((keyCode == KeyEvent.KEYCODE_BACK) && webview.canGoBack()) {
			webview.goBack();
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	private void setUpProgressBar(){
		progressBar = new ProgressDialog(this);
		progressBar.setCancelable(true);
		progressBar.setOnCancelListener(progressBarOnCancelListener);
		progressBar.setMessage("Loading...");
		progressBar.show();
	}

	private final OnCancelListener progressBarOnCancelListener = new OnCancelListener() {
		@Override
		public void onCancel(DialogInterface arg0) {
			if (progressBar != null && progressBar.isShowing()) {
				progressBar.dismiss();
			}

		}
	};

	@Override
	public void onResume(){
		super.onResume();
		CookieSyncManager.getInstance().startSync();
	}

	@Override
	public void onStop(){
		super.onStop();
		CookieSyncManager.getInstance().stopSync();
	}

	@Override
	public void onDestroy(){
		super.onDestroy();
		webview.destroy();
	}
}
